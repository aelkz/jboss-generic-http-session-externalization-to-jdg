<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.redhat.jdg.demo</groupId>
	<artifactId>jdg-service</artifactId>
	<version>1.0.0</version>
	<packaging>war</packaging>
	<name>JBoss JDG Session Externalization Demo Service</name>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<distribution>repo</distribution>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
		</license>
	</licenses>

	<!-- Activate JBoss Product Maven repository. NOTE: Configuring the Maven
		repository in the pom.xml file is not a recommended procedure and is only
		done here to make it easier to use the demo. For more information about how
		to configure Maven for your application, see the section entitled 'Use the
		Maven Repository' in the Development Guide for Red Hat JBoss Enterprise Application
		Platform located here: https://access.redhat.com/documentation/en/jboss-enterprise-application-platform/ -->
	<repositories>
		<repository>
			<id>jboss-enterprise-maven-repository</id>
			<url>https://maven.repository.redhat.com/ga/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>jboss-enterprise-maven-repository</id>
			<url>https://maven.repository.redhat.com/ga/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- JBoss dependency versions -->

		<version.jdg7>8.3.0.Final-redhat-1</version.jdg7>
    <version.jdg6.5>6.3.1.Final-redhat-1</version.jdg6.5>

		<!-- other plugin versions -->
		<version.war.plugin>2.1.1</version.war.plugin>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.7</maven.compiler.target>
		<maven.compiler.source>1.7</maven.compiler.source>

	</properties>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<groupId>org.infinispan</groupId>
				<artifactId>infinispan-bom</artifactId>
				<version>${version.jdg7}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- Import the JAX-RS API -->
		<dependency>
			<groupId>javax.ws.rs</groupId>
			<artifactId>javax.ws.rs-api</artifactId>
			<version>2.0.1</version>
			<scope>provided</scope>
		</dependency>
		<!-- Import the Servlet API -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JSON API-->
		<dependency>
			<groupId>javax.json</groupId>
			<artifactId>javax.json-api</artifactId>
			<version>1.0</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<profiles>
		<profile>
				<!--  Default profile for EAP 7 -->
				<id>default</id>
				<activation>
      		<activeByDefault>true</activeByDefault>
    		</activation>
				<build>
					<!-- Set the name of the WAR, used as the context root when the app is
						deployed -->
					<finalName>${project.artifactId}</finalName>
					<plugins>
						<plugin>
							<artifactId>maven-war-plugin</artifactId>
							<version>${version.war.plugin}</version>
							<configuration>
								<outputDirectory>deployments</outputDirectory>
								<!-- Java EE doesn't require web.xml, Maven needs to catch up! -->
								<failOnMissingWebXml>false</failOnMissingWebXml>
							</configuration>
						</plugin>
					</plugins>
				</build>
				<dependencies>
					<!-- Import the Infinispan client hotrod -->
					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-core</artifactId>
						<version>${version.jdg7}</version>
					</dependency>
					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-commons</artifactId>
						<version>${version.jdg7}</version>
					</dependency>
					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-client-hotrod</artifactId>
						<version>${version.jdg7}</version>
					</dependency>

					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-query-dsl</artifactId>
						<version>${version.jdg7}</version>
					</dependency>

					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-remote-query-client</artifactId>
						<version>${version.jdg7}</version>
					</dependency>
				</dependencies>
 		</profile>

		<profile>
				<!-- When built in OpenShift the 'openshift' profile will be used when
						invoking mvn. -->
				<!-- Use this profile for any OpenShift specific customization your app
						will need. -->
				<!-- By default that is to put the resulting archive into the 'deployments'
						folder. -->
				<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
				<id>openshift</id>
				<build>
						<plugins>
								<plugin>
										<artifactId>maven-war-plugin</artifactId>
										<version>${version.war.plugin}</version>
										<configuration>
												<outputDirectory>deployments</outputDirectory>
												<warName>ROOT</warName>
												<!-- Java EE doesn't require web.xml, Maven needs to catch up! -->
												<failOnMissingWebXml>false</failOnMissingWebXml>
												<webXml>${project.basedir}/src/main/openshift-eap/WEB-INF/web.xml</webXml>
										</configuration>
								</plugin>
						</plugins>
				</build>
				<dependencies>
					<!-- Import the Infinispan client hotrod -->
					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-core</artifactId>
						<version>${version.jdg6.5}</version>
					</dependency>
					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-commons</artifactId>
						<version>${version.jdg6.5}</version>
					</dependency>
					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-client-hotrod</artifactId>
						<version>${version.jdg6.5}</version>
					</dependency>

					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-query-dsl</artifactId>
						<version>${version.jdg6.5}</version>
					</dependency>

					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-remote-query-client</artifactId>
						<version>${version.jdg6.5}</version>
					</dependency>
				</dependencies>
		</profile>
			<profile>
				<!-- Tomcat profile. -->
 				<id>tomcat</id>
				<build>
					<plugins>
						<plugin>
							<artifactId>maven-war-plugin</artifactId>
							<version>${version.war.plugin}</version>
							<configuration>
								<outputDirectory>deployments</outputDirectory>
								<warName>jdg-service4tomcat</warName>
								<!-- Java EE doesn't require web.xml, Maven needs to catch up! -->
								<failOnMissingWebXml>false</failOnMissingWebXml>
								<webXml>${project.basedir}/src/main/tomcat-web/WEB-INF/web.xml</webXml>
							</configuration>
						</plugin>
					</plugins>
				</build>
				<dependencies>
					<dependency>
    				<groupId>javax.ws.rs</groupId>
    			  <artifactId>jsr311-api</artifactId>
    				<version>1.1.1</version>
					</dependency>
					<dependency>
    				<groupId>javax.ws.rs</groupId>
    				<artifactId>javax.ws.rs-api</artifactId>
    				<version>2.0.1</version>
				 </dependency>
				 <dependency>
					 <groupId>javax.json</groupId>
					 <artifactId>javax.json-api</artifactId>
					 <version>1.0</version>
				 </dependency>
				 <dependency>
    	 		<groupId>org.glassfish</groupId>
    			<artifactId>javax.json</artifactId>
    			<version>1.0.4</version>
				</dependency>
				 <dependency>
 				 		<groupId>org.jboss.resteasy</groupId>
 						<artifactId>resteasy-jaxrs</artifactId>
 						<version>3.1.0.Final</version>
					</dependency>
					<!-- Servlet pluggability support -->
					<dependency>
					    <groupId>org.jboss.resteasy</groupId>
					    <artifactId>resteasy-servlet-initializer</artifactId>
					    <version>3.1.0.Final</version>
					</dependency>
					<!-- JSON/POJO support -->
					<dependency>
					    <groupId>org.jboss.resteasy</groupId>
					    <artifactId>resteasy-jackson2-provider</artifactId>
					    <version>3.1.0.Final</version>
					</dependency>
					<!-- Import the Infinispan client hotrod -->
					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-core</artifactId>
						<version>${version.jdg7}</version>
					</dependency>
					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-commons</artifactId>
						<version>${version.jdg7}</version>
					</dependency>
					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-client-hotrod</artifactId>
						<version>${version.jdg7}</version>
					</dependency>

					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-query-dsl</artifactId>
						<version>${version.jdg7}</version>
					</dependency>

					<dependency>
						<groupId>org.infinispan</groupId>
						<artifactId>infinispan-remote-query-client</artifactId>
						<version>${version.jdg7}</version>
					</dependency>
				</dependencies>
			</profile>
		</profiles>
</project>
